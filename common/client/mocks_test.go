// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package client

import (
	"hedge/common/db"
	"hedge/common/errors"
	"hedge/common/models"
	"net/http"

	"github.com/elastic/go-elasticsearch/v8/esapi"
	"github.com/go-redsync/redsync/v4"
	mock "github.com/stretchr/testify/mock"
)

// NewMockElasticClientInterface creates a new instance of MockElasticClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockElasticClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockElasticClientInterface {
	mock := &MockElasticClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockElasticClientInterface is an autogenerated mock type for the ElasticClientInterface type
type MockElasticClientInterface struct {
	mock.Mock
}

type MockElasticClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockElasticClientInterface) EXPECT() *MockElasticClientInterface_Expecter {
	return &MockElasticClientInterface_Expecter{mock: &_m.Mock}
}

// BuildSearchRequest provides a mock function for the type MockElasticClientInterface
func (_mock *MockElasticClientInterface) BuildSearchRequest(luceneQuery string, indexName string) esapi.SearchRequest {
	ret := _mock.Called(luceneQuery, indexName)

	if len(ret) == 0 {
		panic("no return value specified for BuildSearchRequest")
	}

	var r0 esapi.SearchRequest
	if returnFunc, ok := ret.Get(0).(func(string, string) esapi.SearchRequest); ok {
		r0 = returnFunc(luceneQuery, indexName)
	} else {
		r0 = ret.Get(0).(esapi.SearchRequest)
	}
	return r0
}

// MockElasticClientInterface_BuildSearchRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildSearchRequest'
type MockElasticClientInterface_BuildSearchRequest_Call struct {
	*mock.Call
}

// BuildSearchRequest is a helper method to define mock.On call
//   - luceneQuery
//   - indexName
func (_e *MockElasticClientInterface_Expecter) BuildSearchRequest(luceneQuery interface{}, indexName interface{}) *MockElasticClientInterface_BuildSearchRequest_Call {
	return &MockElasticClientInterface_BuildSearchRequest_Call{Call: _e.mock.On("BuildSearchRequest", luceneQuery, indexName)}
}

func (_c *MockElasticClientInterface_BuildSearchRequest_Call) Run(run func(luceneQuery string, indexName string)) *MockElasticClientInterface_BuildSearchRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockElasticClientInterface_BuildSearchRequest_Call) Return(searchRequest esapi.SearchRequest) *MockElasticClientInterface_BuildSearchRequest_Call {
	_c.Call.Return(searchRequest)
	return _c
}

func (_c *MockElasticClientInterface_BuildSearchRequest_Call) RunAndReturn(run func(luceneQuery string, indexName string) esapi.SearchRequest) *MockElasticClientInterface_BuildSearchRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertToBMCEvents provides a mock function for the type MockElasticClientInterface
func (_mock *MockElasticClientInterface) ConvertToBMCEvents(result map[string]interface{}) ([]*models.HedgeEvent, error) {
	ret := _mock.Called(result)

	if len(ret) == 0 {
		panic("no return value specified for ConvertToBMCEvents")
	}

	var r0 []*models.HedgeEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}) ([]*models.HedgeEvent, error)); ok {
		return returnFunc(result)
	}
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}) []*models.HedgeEvent); ok {
		r0 = returnFunc(result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.HedgeEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = returnFunc(result)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockElasticClientInterface_ConvertToBMCEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertToBMCEvents'
type MockElasticClientInterface_ConvertToBMCEvents_Call struct {
	*mock.Call
}

// ConvertToBMCEvents is a helper method to define mock.On call
//   - result
func (_e *MockElasticClientInterface_Expecter) ConvertToBMCEvents(result interface{}) *MockElasticClientInterface_ConvertToBMCEvents_Call {
	return &MockElasticClientInterface_ConvertToBMCEvents_Call{Call: _e.mock.On("ConvertToBMCEvents", result)}
}

func (_c *MockElasticClientInterface_ConvertToBMCEvents_Call) Run(run func(result map[string]interface{})) *MockElasticClientInterface_ConvertToBMCEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *MockElasticClientInterface_ConvertToBMCEvents_Call) Return(hedgeEvents []*models.HedgeEvent, err error) *MockElasticClientInterface_ConvertToBMCEvents_Call {
	_c.Call.Return(hedgeEvents, err)
	return _c
}

func (_c *MockElasticClientInterface_ConvertToBMCEvents_Call) RunAndReturn(run func(result map[string]interface{}) ([]*models.HedgeEvent, error)) *MockElasticClientInterface_ConvertToBMCEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertToCommandLogs provides a mock function for the type MockElasticClientInterface
func (_mock *MockElasticClientInterface) ConvertToCommandLogs(hitResults map[string]interface{}) ([]*models.CommandExecutionLog, error) {
	ret := _mock.Called(hitResults)

	if len(ret) == 0 {
		panic("no return value specified for ConvertToCommandLogs")
	}

	var r0 []*models.CommandExecutionLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}) ([]*models.CommandExecutionLog, error)); ok {
		return returnFunc(hitResults)
	}
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}) []*models.CommandExecutionLog); ok {
		r0 = returnFunc(hitResults)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.CommandExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = returnFunc(hitResults)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockElasticClientInterface_ConvertToCommandLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertToCommandLogs'
type MockElasticClientInterface_ConvertToCommandLogs_Call struct {
	*mock.Call
}

// ConvertToCommandLogs is a helper method to define mock.On call
//   - hitResults
func (_e *MockElasticClientInterface_Expecter) ConvertToCommandLogs(hitResults interface{}) *MockElasticClientInterface_ConvertToCommandLogs_Call {
	return &MockElasticClientInterface_ConvertToCommandLogs_Call{Call: _e.mock.On("ConvertToCommandLogs", hitResults)}
}

func (_c *MockElasticClientInterface_ConvertToCommandLogs_Call) Run(run func(hitResults map[string]interface{})) *MockElasticClientInterface_ConvertToCommandLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *MockElasticClientInterface_ConvertToCommandLogs_Call) Return(commandExecutionLogs []*models.CommandExecutionLog, err error) *MockElasticClientInterface_ConvertToCommandLogs_Call {
	_c.Call.Return(commandExecutionLogs, err)
	return _c
}

func (_c *MockElasticClientInterface_ConvertToCommandLogs_Call) RunAndReturn(run func(hitResults map[string]interface{}) ([]*models.CommandExecutionLog, error)) *MockElasticClientInterface_ConvertToCommandLogs_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function for the type MockElasticClientInterface
func (_mock *MockElasticClientInterface) Index(req esapi.IndexRequest) error {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(esapi.IndexRequest) error); ok {
		r0 = returnFunc(req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockElasticClientInterface_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockElasticClientInterface_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - req
func (_e *MockElasticClientInterface_Expecter) Index(req interface{}) *MockElasticClientInterface_Index_Call {
	return &MockElasticClientInterface_Index_Call{Call: _e.mock.On("Index", req)}
}

func (_c *MockElasticClientInterface_Index_Call) Run(run func(req esapi.IndexRequest)) *MockElasticClientInterface_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(esapi.IndexRequest))
	})
	return _c
}

func (_c *MockElasticClientInterface_Index_Call) Return(err error) *MockElasticClientInterface_Index_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockElasticClientInterface_Index_Call) RunAndReturn(run func(req esapi.IndexRequest) error) *MockElasticClientInterface_Index_Call {
	_c.Call.Return(run)
	return _c
}

// IndexEvent provides a mock function for the type MockElasticClientInterface
func (_mock *MockElasticClientInterface) IndexEvent(bmcEvent *models.HedgeEvent) error {
	ret := _mock.Called(bmcEvent)

	if len(ret) == 0 {
		panic("no return value specified for IndexEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.HedgeEvent) error); ok {
		r0 = returnFunc(bmcEvent)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockElasticClientInterface_IndexEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexEvent'
type MockElasticClientInterface_IndexEvent_Call struct {
	*mock.Call
}

// IndexEvent is a helper method to define mock.On call
//   - bmcEvent
func (_e *MockElasticClientInterface_Expecter) IndexEvent(bmcEvent interface{}) *MockElasticClientInterface_IndexEvent_Call {
	return &MockElasticClientInterface_IndexEvent_Call{Call: _e.mock.On("IndexEvent", bmcEvent)}
}

func (_c *MockElasticClientInterface_IndexEvent_Call) Run(run func(bmcEvent *models.HedgeEvent)) *MockElasticClientInterface_IndexEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.HedgeEvent))
	})
	return _c
}

func (_c *MockElasticClientInterface_IndexEvent_Call) Return(err error) *MockElasticClientInterface_IndexEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockElasticClientInterface_IndexEvent_Call) RunAndReturn(run func(bmcEvent *models.HedgeEvent) error) *MockElasticClientInterface_IndexEvent_Call {
	_c.Call.Return(run)
	return _c
}

// Ingest provides a mock function for the type MockElasticClientInterface
func (_mock *MockElasticClientInterface) Ingest(indexName string, prediction string) error {
	ret := _mock.Called(indexName, prediction)

	if len(ret) == 0 {
		panic("no return value specified for Ingest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(indexName, prediction)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockElasticClientInterface_Ingest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ingest'
type MockElasticClientInterface_Ingest_Call struct {
	*mock.Call
}

// Ingest is a helper method to define mock.On call
//   - indexName
//   - prediction
func (_e *MockElasticClientInterface_Expecter) Ingest(indexName interface{}, prediction interface{}) *MockElasticClientInterface_Ingest_Call {
	return &MockElasticClientInterface_Ingest_Call{Call: _e.mock.On("Ingest", indexName, prediction)}
}

func (_c *MockElasticClientInterface_Ingest_Call) Run(run func(indexName string, prediction string)) *MockElasticClientInterface_Ingest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockElasticClientInterface_Ingest_Call) Return(err error) *MockElasticClientInterface_Ingest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockElasticClientInterface_Ingest_Call) RunAndReturn(run func(indexName string, prediction string) error) *MockElasticClientInterface_Ingest_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function for the type MockElasticClientInterface
func (_mock *MockElasticClientInterface) Search(luceneQuery string, indexName string) (map[string]interface{}, error) {
	ret := _mock.Called(luceneQuery, indexName)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 map[string]interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (map[string]interface{}, error)); ok {
		return returnFunc(luceneQuery, indexName)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) map[string]interface{}); ok {
		r0 = returnFunc(luceneQuery, indexName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(luceneQuery, indexName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockElasticClientInterface_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockElasticClientInterface_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - luceneQuery
//   - indexName
func (_e *MockElasticClientInterface_Expecter) Search(luceneQuery interface{}, indexName interface{}) *MockElasticClientInterface_Search_Call {
	return &MockElasticClientInterface_Search_Call{Call: _e.mock.On("Search", luceneQuery, indexName)}
}

func (_c *MockElasticClientInterface_Search_Call) Run(run func(luceneQuery string, indexName string)) *MockElasticClientInterface_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockElasticClientInterface_Search_Call) Return(stringToIfaceVal map[string]interface{}, err error) *MockElasticClientInterface_Search_Call {
	_c.Call.Return(stringToIfaceVal, err)
	return _c
}

func (_c *MockElasticClientInterface_Search_Call) RunAndReturn(run func(luceneQuery string, indexName string) (map[string]interface{}, error)) *MockElasticClientInterface_Search_Call {
	_c.Call.Return(run)
	return _c
}

// SearchCommandLogs provides a mock function for the type MockElasticClientInterface
func (_mock *MockElasticClientInterface) SearchCommandLogs(luceneQuery string) ([]*models.CommandExecutionLog, error) {
	ret := _mock.Called(luceneQuery)

	if len(ret) == 0 {
		panic("no return value specified for SearchCommandLogs")
	}

	var r0 []*models.CommandExecutionLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]*models.CommandExecutionLog, error)); ok {
		return returnFunc(luceneQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []*models.CommandExecutionLog); ok {
		r0 = returnFunc(luceneQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.CommandExecutionLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(luceneQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockElasticClientInterface_SearchCommandLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchCommandLogs'
type MockElasticClientInterface_SearchCommandLogs_Call struct {
	*mock.Call
}

// SearchCommandLogs is a helper method to define mock.On call
//   - luceneQuery
func (_e *MockElasticClientInterface_Expecter) SearchCommandLogs(luceneQuery interface{}) *MockElasticClientInterface_SearchCommandLogs_Call {
	return &MockElasticClientInterface_SearchCommandLogs_Call{Call: _e.mock.On("SearchCommandLogs", luceneQuery)}
}

func (_c *MockElasticClientInterface_SearchCommandLogs_Call) Run(run func(luceneQuery string)) *MockElasticClientInterface_SearchCommandLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockElasticClientInterface_SearchCommandLogs_Call) Return(commandExecutionLogs []*models.CommandExecutionLog, err error) *MockElasticClientInterface_SearchCommandLogs_Call {
	_c.Call.Return(commandExecutionLogs, err)
	return _c
}

func (_c *MockElasticClientInterface_SearchCommandLogs_Call) RunAndReturn(run func(luceneQuery string) ([]*models.CommandExecutionLog, error)) *MockElasticClientInterface_SearchCommandLogs_Call {
	_c.Call.Return(run)
	return _c
}

// SearchEvents provides a mock function for the type MockElasticClientInterface
func (_mock *MockElasticClientInterface) SearchEvents(luceneQuery string) ([]*models.HedgeEvent, error) {
	ret := _mock.Called(luceneQuery)

	if len(ret) == 0 {
		panic("no return value specified for SearchEvents")
	}

	var r0 []*models.HedgeEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]*models.HedgeEvent, error)); ok {
		return returnFunc(luceneQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []*models.HedgeEvent); ok {
		r0 = returnFunc(luceneQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.HedgeEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(luceneQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockElasticClientInterface_SearchEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchEvents'
type MockElasticClientInterface_SearchEvents_Call struct {
	*mock.Call
}

// SearchEvents is a helper method to define mock.On call
//   - luceneQuery
func (_e *MockElasticClientInterface_Expecter) SearchEvents(luceneQuery interface{}) *MockElasticClientInterface_SearchEvents_Call {
	return &MockElasticClientInterface_SearchEvents_Call{Call: _e.mock.On("SearchEvents", luceneQuery)}
}

func (_c *MockElasticClientInterface_SearchEvents_Call) Run(run func(luceneQuery string)) *MockElasticClientInterface_SearchEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockElasticClientInterface_SearchEvents_Call) Return(hedgeEvents []*models.HedgeEvent, err error) *MockElasticClientInterface_SearchEvents_Call {
	_c.Call.Return(hedgeEvents, err)
	return _c
}

func (_c *MockElasticClientInterface_SearchEvents_Call) RunAndReturn(run func(luceneQuery string) ([]*models.HedgeEvent, error)) *MockElasticClientInterface_SearchEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHTTPClient creates a new instance of MockHTTPClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHTTPClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHTTPClient {
	mock := &MockHTTPClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHTTPClient is an autogenerated mock type for the HTTPClient type
type MockHTTPClient struct {
	mock.Mock
}

type MockHTTPClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHTTPClient) EXPECT() *MockHTTPClient_Expecter {
	return &MockHTTPClient_Expecter{mock: &_m.Mock}
}

// Do provides a mock function for the type MockHTTPClient
func (_mock *MockHTTPClient) Do(req *http.Request) (*http.Response, error) {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*http.Request) (*http.Response, error)); ok {
		return returnFunc(req)
	}
	if returnFunc, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = returnFunc(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = returnFunc(req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHTTPClient_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockHTTPClient_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - req
func (_e *MockHTTPClient_Expecter) Do(req interface{}) *MockHTTPClient_Do_Call {
	return &MockHTTPClient_Do_Call{Call: _e.mock.On("Do", req)}
}

func (_c *MockHTTPClient_Do_Call) Run(run func(req *http.Request)) *MockHTTPClient_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockHTTPClient_Do_Call) Return(response *http.Response, err error) *MockHTTPClient_Do_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockHTTPClient_Do_Call) RunAndReturn(run func(req *http.Request) (*http.Response, error)) *MockHTTPClient_Do_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDBClientInterface creates a new instance of MockDBClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBClientInterface {
	mock := &MockDBClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBClientInterface is an autogenerated mock type for the DBClientInterface type
type MockDBClientInterface struct {
	mock.Mock
}

type MockDBClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBClientInterface) EXPECT() *MockDBClientInterface_Expecter {
	return &MockDBClientInterface_Expecter{mock: &_m.Mock}
}

// AcquireRedisLock provides a mock function for the type MockDBClientInterface
func (_mock *MockDBClientInterface) AcquireRedisLock(lockName string) (*redsync.Mutex, errors.HedgeError) {
	ret := _mock.Called(lockName)

	if len(ret) == 0 {
		panic("no return value specified for AcquireRedisLock")
	}

	var r0 *redsync.Mutex
	var r1 errors.HedgeError
	if returnFunc, ok := ret.Get(0).(func(string) (*redsync.Mutex, errors.HedgeError)); ok {
		return returnFunc(lockName)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *redsync.Mutex); ok {
		r0 = returnFunc(lockName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redsync.Mutex)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = returnFunc(lockName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}
	return r0, r1
}

// MockDBClientInterface_AcquireRedisLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcquireRedisLock'
type MockDBClientInterface_AcquireRedisLock_Call struct {
	*mock.Call
}

// AcquireRedisLock is a helper method to define mock.On call
//   - lockName
func (_e *MockDBClientInterface_Expecter) AcquireRedisLock(lockName interface{}) *MockDBClientInterface_AcquireRedisLock_Call {
	return &MockDBClientInterface_AcquireRedisLock_Call{Call: _e.mock.On("AcquireRedisLock", lockName)}
}

func (_c *MockDBClientInterface_AcquireRedisLock_Call) Run(run func(lockName string)) *MockDBClientInterface_AcquireRedisLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDBClientInterface_AcquireRedisLock_Call) Return(mutex *redsync.Mutex, hedgeError errors.HedgeError) *MockDBClientInterface_AcquireRedisLock_Call {
	_c.Call.Return(mutex, hedgeError)
	return _c
}

func (_c *MockDBClientInterface_AcquireRedisLock_Call) RunAndReturn(run func(lockName string) (*redsync.Mutex, errors.HedgeError)) *MockDBClientInterface_AcquireRedisLock_Call {
	_c.Call.Return(run)
	return _c
}

// GetDbClient provides a mock function for the type MockDBClientInterface
func (_mock *MockDBClientInterface) GetDbClient(dbConfig *db.DatabaseConfig) DBClientInterface {
	ret := _mock.Called(dbConfig)

	if len(ret) == 0 {
		panic("no return value specified for GetDbClient")
	}

	var r0 DBClientInterface
	if returnFunc, ok := ret.Get(0).(func(*db.DatabaseConfig) DBClientInterface); ok {
		r0 = returnFunc(dbConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DBClientInterface)
		}
	}
	return r0
}

// MockDBClientInterface_GetDbClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDbClient'
type MockDBClientInterface_GetDbClient_Call struct {
	*mock.Call
}

// GetDbClient is a helper method to define mock.On call
//   - dbConfig
func (_e *MockDBClientInterface_Expecter) GetDbClient(dbConfig interface{}) *MockDBClientInterface_GetDbClient_Call {
	return &MockDBClientInterface_GetDbClient_Call{Call: _e.mock.On("GetDbClient", dbConfig)}
}

func (_c *MockDBClientInterface_GetDbClient_Call) Run(run func(dbConfig *db.DatabaseConfig)) *MockDBClientInterface_GetDbClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*db.DatabaseConfig))
	})
	return _c
}

func (_c *MockDBClientInterface_GetDbClient_Call) Return(dBClientInterface DBClientInterface) *MockDBClientInterface_GetDbClient_Call {
	_c.Call.Return(dBClientInterface)
	return _c
}

func (_c *MockDBClientInterface_GetDbClient_Call) RunAndReturn(run func(dbConfig *db.DatabaseConfig) DBClientInterface) *MockDBClientInterface_GetDbClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetricCounter provides a mock function for the type MockDBClientInterface
func (_mock *MockDBClientInterface) GetMetricCounter(key string) (int64, errors.HedgeError) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricCounter")
	}

	var r0 int64
	var r1 errors.HedgeError
	if returnFunc, ok := ret.Get(0).(func(string) (int64, errors.HedgeError)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int64); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(string) errors.HedgeError); ok {
		r1 = returnFunc(key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}
	return r0, r1
}

// MockDBClientInterface_GetMetricCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricCounter'
type MockDBClientInterface_GetMetricCounter_Call struct {
	*mock.Call
}

// GetMetricCounter is a helper method to define mock.On call
//   - key
func (_e *MockDBClientInterface_Expecter) GetMetricCounter(key interface{}) *MockDBClientInterface_GetMetricCounter_Call {
	return &MockDBClientInterface_GetMetricCounter_Call{Call: _e.mock.On("GetMetricCounter", key)}
}

func (_c *MockDBClientInterface_GetMetricCounter_Call) Run(run func(key string)) *MockDBClientInterface_GetMetricCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDBClientInterface_GetMetricCounter_Call) Return(n int64, hedgeError errors.HedgeError) *MockDBClientInterface_GetMetricCounter_Call {
	_c.Call.Return(n, hedgeError)
	return _c
}

func (_c *MockDBClientInterface_GetMetricCounter_Call) RunAndReturn(run func(key string) (int64, errors.HedgeError)) *MockDBClientInterface_GetMetricCounter_Call {
	_c.Call.Return(run)
	return _c
}

// IncrMetricCounterBy provides a mock function for the type MockDBClientInterface
func (_mock *MockDBClientInterface) IncrMetricCounterBy(key string, value int64) (int64, errors.HedgeError) {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for IncrMetricCounterBy")
	}

	var r0 int64
	var r1 errors.HedgeError
	if returnFunc, ok := ret.Get(0).(func(string, int64) (int64, errors.HedgeError)); ok {
		return returnFunc(key, value)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int64) int64); ok {
		r0 = returnFunc(key, value)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(string, int64) errors.HedgeError); ok {
		r1 = returnFunc(key, value)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.HedgeError)
		}
	}
	return r0, r1
}

// MockDBClientInterface_IncrMetricCounterBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrMetricCounterBy'
type MockDBClientInterface_IncrMetricCounterBy_Call struct {
	*mock.Call
}

// IncrMetricCounterBy is a helper method to define mock.On call
//   - key
//   - value
func (_e *MockDBClientInterface_Expecter) IncrMetricCounterBy(key interface{}, value interface{}) *MockDBClientInterface_IncrMetricCounterBy_Call {
	return &MockDBClientInterface_IncrMetricCounterBy_Call{Call: _e.mock.On("IncrMetricCounterBy", key, value)}
}

func (_c *MockDBClientInterface_IncrMetricCounterBy_Call) Run(run func(key string, value int64)) *MockDBClientInterface_IncrMetricCounterBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockDBClientInterface_IncrMetricCounterBy_Call) Return(n int64, hedgeError errors.HedgeError) *MockDBClientInterface_IncrMetricCounterBy_Call {
	_c.Call.Return(n, hedgeError)
	return _c
}

func (_c *MockDBClientInterface_IncrMetricCounterBy_Call) RunAndReturn(run func(key string, value int64) (int64, errors.HedgeError)) *MockDBClientInterface_IncrMetricCounterBy_Call {
	_c.Call.Return(run)
	return _c
}

// PublishToRedisBus provides a mock function for the type MockDBClientInterface
func (_mock *MockDBClientInterface) PublishToRedisBus(topic string, msg interface{}) error {
	ret := _mock.Called(topic, msg)

	if len(ret) == 0 {
		panic("no return value specified for PublishToRedisBus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = returnFunc(topic, msg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBClientInterface_PublishToRedisBus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishToRedisBus'
type MockDBClientInterface_PublishToRedisBus_Call struct {
	*mock.Call
}

// PublishToRedisBus is a helper method to define mock.On call
//   - topic
//   - msg
func (_e *MockDBClientInterface_Expecter) PublishToRedisBus(topic interface{}, msg interface{}) *MockDBClientInterface_PublishToRedisBus_Call {
	return &MockDBClientInterface_PublishToRedisBus_Call{Call: _e.mock.On("PublishToRedisBus", topic, msg)}
}

func (_c *MockDBClientInterface_PublishToRedisBus_Call) Run(run func(topic string, msg interface{})) *MockDBClientInterface_PublishToRedisBus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockDBClientInterface_PublishToRedisBus_Call) Return(err error) *MockDBClientInterface_PublishToRedisBus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBClientInterface_PublishToRedisBus_Call) RunAndReturn(run func(topic string, msg interface{}) error) *MockDBClientInterface_PublishToRedisBus_Call {
	_c.Call.Return(run)
	return _c
}

// SetMetricCounter provides a mock function for the type MockDBClientInterface
func (_mock *MockDBClientInterface) SetMetricCounter(key string, value int64) errors.HedgeError {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetMetricCounter")
	}

	var r0 errors.HedgeError
	if returnFunc, ok := ret.Get(0).(func(string, int64) errors.HedgeError); ok {
		r0 = returnFunc(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.HedgeError)
		}
	}
	return r0
}

// MockDBClientInterface_SetMetricCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMetricCounter'
type MockDBClientInterface_SetMetricCounter_Call struct {
	*mock.Call
}

// SetMetricCounter is a helper method to define mock.On call
//   - key
//   - value
func (_e *MockDBClientInterface_Expecter) SetMetricCounter(key interface{}, value interface{}) *MockDBClientInterface_SetMetricCounter_Call {
	return &MockDBClientInterface_SetMetricCounter_Call{Call: _e.mock.On("SetMetricCounter", key, value)}
}

func (_c *MockDBClientInterface_SetMetricCounter_Call) Run(run func(key string, value int64)) *MockDBClientInterface_SetMetricCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockDBClientInterface_SetMetricCounter_Call) Return(hedgeError errors.HedgeError) *MockDBClientInterface_SetMetricCounter_Call {
	_c.Call.Return(hedgeError)
	return _c
}

func (_c *MockDBClientInterface_SetMetricCounter_Call) RunAndReturn(run func(key string, value int64) errors.HedgeError) *MockDBClientInterface_SetMetricCounter_Call {
	_c.Call.Return(run)
	return _c
}
