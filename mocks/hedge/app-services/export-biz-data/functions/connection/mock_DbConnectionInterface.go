// Code generated by mockery v2.38.0. DO NOT EDIT.

package connection

import (
	db "hedge/app-services/export-biz-data/db"
	interfaces "github.com/edgexfoundry/app-functions-sdk-go/v3/pkg/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// MockDbConnectionInterface is an autogenerated mock type for the DbConnectionInterface type
type MockDbConnectionInterface struct {
	mock.Mock
}

type MockDbConnectionInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDbConnectionInterface) EXPECT() *MockDbConnectionInterface_Expecter {
	return &MockDbConnectionInterface_Expecter{mock: &_m.Mock}
}

// CreatePostgresConnection provides a mock function with given fields: service
func (_m *MockDbConnectionInterface) CreatePostgresConnection(service interfaces.ApplicationService) (db.SqlInterface, error) {
	ret := _m.Called(service)

	if len(ret) == 0 {
		panic("no return value specified for CreatePostgresConnection")
	}

	var r0 db.SqlInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.ApplicationService) (db.SqlInterface, error)); ok {
		return rf(service)
	}
	if rf, ok := ret.Get(0).(func(interfaces.ApplicationService) db.SqlInterface); ok {
		r0 = rf(service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.SqlInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(interfaces.ApplicationService) error); ok {
		r1 = rf(service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDbConnectionInterface_CreatePostgresConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePostgresConnection'
type MockDbConnectionInterface_CreatePostgresConnection_Call struct {
	*mock.Call
}

// CreatePostgresConnection is a helper method to define mock.On call
//   - service interfaces.ApplicationService
func (_e *MockDbConnectionInterface_Expecter) CreatePostgresConnection(service interface{}) *MockDbConnectionInterface_CreatePostgresConnection_Call {
	return &MockDbConnectionInterface_CreatePostgresConnection_Call{Call: _e.mock.On("CreatePostgresConnection", service)}
}

func (_c *MockDbConnectionInterface_CreatePostgresConnection_Call) Run(run func(service interfaces.ApplicationService)) *MockDbConnectionInterface_CreatePostgresConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.ApplicationService))
	})
	return _c
}

func (_c *MockDbConnectionInterface_CreatePostgresConnection_Call) Return(_a0 db.SqlInterface, _a1 error) *MockDbConnectionInterface_CreatePostgresConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDbConnectionInterface_CreatePostgresConnection_Call) RunAndReturn(run func(interfaces.ApplicationService) (db.SqlInterface, error)) *MockDbConnectionInterface_CreatePostgresConnection_Call {
	_c.Call.Return(run)
	return _c
}

// TestConnection provides a mock function with given fields: dbWrapper
func (_m *MockDbConnectionInterface) TestConnection(dbWrapper db.SqlInterface) error {
	ret := _m.Called(dbWrapper)

	if len(ret) == 0 {
		panic("no return value specified for TestConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(db.SqlInterface) error); ok {
		r0 = rf(dbWrapper)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDbConnectionInterface_TestConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestConnection'
type MockDbConnectionInterface_TestConnection_Call struct {
	*mock.Call
}

// TestConnection is a helper method to define mock.On call
//   - dbWrapper db.SqlInterface
func (_e *MockDbConnectionInterface_Expecter) TestConnection(dbWrapper interface{}) *MockDbConnectionInterface_TestConnection_Call {
	return &MockDbConnectionInterface_TestConnection_Call{Call: _e.mock.On("TestConnection", dbWrapper)}
}

func (_c *MockDbConnectionInterface_TestConnection_Call) Run(run func(dbWrapper db.SqlInterface)) *MockDbConnectionInterface_TestConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.SqlInterface))
	})
	return _c
}

func (_c *MockDbConnectionInterface_TestConnection_Call) Return(_a0 error) *MockDbConnectionInterface_TestConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDbConnectionInterface_TestConnection_Call) RunAndReturn(run func(db.SqlInterface) error) *MockDbConnectionInterface_TestConnection_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDbConnectionInterface creates a new instance of MockDbConnectionInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDbConnectionInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDbConnectionInterface {
	mock := &MockDbConnectionInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
